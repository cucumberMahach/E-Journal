@page "/teacher"
@using System.Web;
@using System.Text.Json;
@inject Blazored.LocalStorage.ILocalStorageService localStorage
@inject HttpClient Http
@inject HttpUtility HttpUtility

<h3>Журнал</h3>
<h4>@(hello)</h4>

<!-- Button trigger modal -->
<button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal">
	Личные данные
</button>

<!-- Modal -->
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
	<div class="modal-dialog modal-dialog-centered">
		<div class="modal-content">
			<div class="modal-header">
				<h5 class="modal-title" id="exampleModalLabel">Личные данные</h5>
				<button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
			</div>
			<div class="modal-body">
				<p><b>ФИО: </b>@(user.LastName) @(user.FirstName) @(user.Patronymic)</p>
				<p><b>Должность: </b>@(user.Post)</p>
			</div>
			<div class="modal-footer">
				<button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Закрыть</button>
			</div>
		</div>
	</div>
</div>
<br />
<label for="lesson-select">Выберите занятие:</label>

<select name="lessons" id="lesson-select" @onchange="@CurrentLessonChanged">
	<option value=""></option>
	@foreach (var l in data)
	{
		<option value="@(l.Id)">@(l.Date) @(l.Teaching.Subject.Name) (@(l.Teaching.LessonForm.LessonType.Name)) @(l.Teaching.Group.Number)</option>
	}
</select>

@if (currentLesson != null)
{
	<table class="table">
		<thead>
			<tr>
				<th scope="col">Студент</th>
				<th scope="col">Отметка</th>
			</tr>
		</thead>
		<tbody>
			@foreach (var attend in currentLesson.Attendance)
			{
				<tr>
					<th scope="row">@attend.Student.LastName @attend.Student.FirstName @attend.Student.Patronymic</th>
					<td>@attend.Mark.Code</td>
				</tr>
			}
		</tbody>

	</table>
}

@code {
	string hello = "";
	List<Lesson> data = new List<Lesson>();
	Lesson? currentLesson;

	E_Journal.Domain.Model.Entities.Teacher user = new Domain.Model.Entities.Teacher();

	protected override async Task OnInitializedAsync()
	{
		var localTeacher = await localStorage.GetItemAsync<E_Journal.Domain.Model.Entities.Student>("teacher");

		var builder = new UriBuilder("https://localhost:7141/Teacher/getByFIO");
		var query = HttpUtility.ParseQueryString(builder.Query);
		query["firstName"] = localTeacher.FirstName;
		query["lastName"] = localTeacher.LastName;
		query["patronymic"] = localTeacher.Patronymic;
		builder.Query = query.ToString();
		try
		{
			var loadedUser = await Http.GetFromJsonAsync<E_Journal.Domain.Model.Entities.Teacher>(builder.ToString());
			if (loadedUser != null)
				user = loadedUser;
		}
		catch (JsonException)
		{

		}

		await loadData();
	}

	public async Task loadData()
	{
		var builder = new UriBuilder("https://localhost:7141/Lesson/getByTeacherId");
		var query = HttpUtility.ParseQueryString(builder.Query);
		query["teacherId"] = user.Id.ToString();
		builder.Query = query.ToString();
		try
		{
			var loadedData = await Http.GetFromJsonAsync<List<Lesson>>(builder.ToString());
			if (loadedData != null)
			{
				data = loadedData;
			}
		}
		catch (JsonException)
		{

		}

		data = data.OrderBy(l => l.Date).ThenBy(l => l.Teaching.Subject.Name).ThenBy(l => l.Teaching.LessonForm.LessonType.Name).ThenBy(l => l.Teaching.Group.Number).ToList();
	}

	public void CurrentLessonChanged(ChangeEventArgs e)
	{
		if (e.Value == null)
			return;
		var value = (string) e.Value;
		if (value == "")
			return;
		var q = Guid.Parse(value);
		var lesson = data.Find(p => p.Id == q);
		if (lesson == null)
			return;
		lesson.Attendance = lesson.Attendance.OrderBy(p => p.Student.LastName).ThenBy(p => p.Student.FirstName).ThenBy(p => p.Student.Patronymic).ToList();
		currentLesson = lesson;
	}
}
